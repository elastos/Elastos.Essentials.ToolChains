#!/usr/bin/env python

import sys

if sys.version_info < (3, 0):
    reload(sys)
    sys.setdefaultencoding('utf8')
import argparse
import distutils.dir_util as dir_util
import json
import os
import platform
import subprocess
import sys
import textwrap
import timeit
from collections import OrderedDict

sys.path.append(os.path.abspath(os.path.dirname(os.path.realpath(__file__)) + '/../lib'))
import ela_plugin
import ela_util

# import ela_xml

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

#####################
### SCRIPT PARAMS ###
#####################

parser = argparse.ArgumentParser(description='Build the Elastor.Essentials project.',
                                 formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument('target', metavar='TARGET', choices=['app', 'all', 'clean', 'clobber', 'cordova', 'plugin'],
                    help=textwrap.dedent('''\
                         Specify the target to build.
                         app: build app;
                         all: build app and cordova;
                         clean: delete platforms and plugins;
                         clobber: delete all build files;
                         cordova: cordova prepare and build;
                         plugin: reintall the specify plugin;
                     '''))
parser.add_argument('-p', '--path', dest='target_path', metavar='PATH', required=False,
                    help='Specify the path of plugin.')
parser.add_argument('-pf', '--platform', nargs='+', dest='platform', required=False,
                    help='Specify the build platform.')

parser.add_argument('-bt', '--buildtype', dest='buildtype', required=False,
                    help='Specify the build type, elastOS or native, default is elastOS.')
parser.add_argument('-bv', '--buildvariant', dest='buildvariant', required=False,
                    help='Specify the build variant.')

parser.add_argument('--build', action='store_true', help='build project')
parser.add_argument('--release', action='store_true', help='build release')
parser.add_argument('--buildarg', dest='buildarg', required=False,
                    help='Specify the build arg.')
parser.add_argument('--autoclean', action='store_true', help='Clean the build when cordova prepare failed')
parser.add_argument('--skippodupdate', action='store_true', help='Do no call \'pod repo update\'')
parser.add_argument('--uploadsourcemap', action='store_true', help='upload source map to sentry')
args = parser.parse_args()
if args.release:
    build_type='--release'
else:
    build_type=''

if args.platform:
    if 'all' in args.platform:
        build_platform=['android', 'ios']
    else:
        build_platform=args.platform
else:
    build_platform= ['android', 'ios']

if args.buildarg:
    build_arg=args.buildarg
else:
    build_arg=''

SCRIPT_PATH=os.path.realpath(__file__)
TOOLCHAINS_DIR_PATH=os.path.dirname(os.path.dirname(SCRIPT_PATH))
TOOLCHAINS_DIR_NAME=os.path.basename(TOOLCHAINS_DIR_PATH)
PROJECT_DIR_PATH=os.path.join(TOOLCHAINS_DIR_PATH, "..")
APP_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "App")
PLUGIN_DIR_PATH=os.path.join(PROJECT_DIR_PATH, "Plugins")
PLATFORM_PATH=os.path.join(APP_DIR_PATH, "platforms")
WWW_MIRROR_ANDROID=os.path.join(APP_DIR_PATH, "platforms/android/app/src/main/assets/www/")
WWW_MIRROR_IOS=os.path.join(APP_DIR_PATH, "platforms/ios/www/")
WWW_MIRROR_ELECTRON=os.path.join(APP_DIR_PATH, "platforms/electron/www/")


###############
### METHODS ###
###############

def isWindows():
    return sys.platform == "win32"

def print_with_color(color, message):
    print(color + message + bcolors.ENDC)

def run_cmd(cmd, ignore_error=False):
    print_with_color(bcolors.OKCYAN, "Running: " + cmd)
    ret = subprocess.call(cmd, shell=True)
    if not ignore_error and ret != 0:
        print_with_color(bcolors.FAIL, "Fail to: " + cmd)
        sys.exit(ret)
    return ret

def remove_tree(directory):
    print_with_color(bcolors.OKCYAN, "Removing: " + directory)
    if os.path.isdir(directory):
        dir_util.remove_tree(directory)

def copy_tree(src, dst, clean=True):
    print_with_color(bcolors.OKCYAN, "Copying " + src + " To " + dst)
    if clean:
        remove_tree(dst)
    if os.path.isdir(src):
        dir_util.copy_tree(src, dst)
    else:
        print_with_color(bcolors.FAIL, "Copy error:" + src + " is not a directory.")

# check the ANDROID_NDK_HOME and ANDROID_SDK_ROOT
def setup_android_ndk():
    if "ANDROID_NDK_HOME" not in os.environ:
        if "ANDROID_SDK_ROOT" not in os.environ:
            if "ANDROID_HOME" in os.environ:
                os.environ["ANDROID_SDK_ROOT"]=os.environ["ANDROID_HOME"]
                print_with_color(bcolors.WARNING, "Use ANDROID_SDK_ROOT! Support for ANDROID_HOME is deprecated")
            else:
                print_with_color(bcolors.FAIL, "You should set ANDROID_SDK_ROOT")
                return

        print_with_color(bcolors.WARNING, "You should set ANDROID_NDK_HOME")
        os.environ["ANDROID_NDK_HOME"]=os.environ["ANDROID_SDK_ROOT"] + "/ndk-bundle"

# def add_firebase():
#     if not os.path.isfile(os.path.join(APP_DIR_PATH + '/GoogleService-Info.plist')):
#         print_with_color(bcolors.OKCYAN, "Can not find GoogleService-Info.plist. Not adding firebase plugin for iOS")
#         return
#     if not os.path.isfile(os.path.join(APP_DIR_PATH + '/google-services.json')):
#         print_with_color(bcolors.OKCYAN, "Can not find google-services.json. Not adding firebase plugin for Android")
#         return

#     # the version 10.1.0-cli will check pod in ubuntu, can't add cordova-plugin-firebasex for ios
#     # 9.1.2-cli is ok
#     sys = platform.system()
#     if sys != "Darwin":
#         run_cmd("cordova platform rm ios")

#     run_cmd("npm install -g xml-js")

#     cmd="cordova plugin add cordova-plugin-firebasex"
#     run_cmd(cmd)

def updatePackageJson(path, platforms):
    file_in = open(path, "r")
    data = json.load(file_in, object_pairs_hook=OrderedDict)
    data['cordova']['platforms'] = platforms
    file_in.close()

    file_out = open(path, 'w')
    file_out.write(json.dumps(data, indent=2).replace(', ', ','))
    file_out.close()

def clean_cordova():
    os.chdir(APP_DIR_PATH)
    if isWindows():
        run_cmd("rd package-lock.json", True)
    else:
        run_cmd("rm package-lock.json", True)
    remove_tree("platforms")
    remove_tree("plugins")

def check_platform_installed():
    for platform in build_platform:
        api_file = os.path.join(PLATFORM_PATH + '/' + platform + '/cordova/Api.js')
        if not os.path.isfile(api_file):
            return False
    return True

startTime = timeit.default_timer()

ela_plugin.setup_paths(APP_DIR_PATH, PLUGIN_DIR_PATH)

if TOOLCHAINS_DIR_NAME != "ToolChains" or not os.path.isdir(APP_DIR_PATH):
    print_with_color(bcolors.FAIL, 'Error: You should "git clone" the "Elastos.Essentials" project with "--recurse-submodules" option.')
    print_with_color(bcolors.FAIL, '       And run the script within the "ToolChains/bin" directory of the project.')
    sys.exit(1)

if args.target == "clean":
    clean_cordova()

if args.target == "clobber":
    os.chdir(APP_DIR_PATH)
    remove_tree("node_modules")
    remove_tree("origin_platforms")
    remove_tree("origin_plugins")
    remove_tree("www")
    clean_cordova()

if args.target == "plugin":
    if args.target_path == None:
        print_with_color(bcolors.FAIL, "You can specify the plugin path: build plugin -p pluginPath")
        ela_plugin.plugin_prepare(True)
        exit(0)
    ela_plugin.re_install_plugin(os.path.join(PROJECT_DIR_PATH, args.target_path))

if args.target == "all" or args.target == "cordova" or args.target == "app":
    os.chdir(APP_DIR_PATH)

    # Make sure to have at least an empty www and platforms folder in the runtime folder, so that cordova doesn't complain we are not in a cordova folder
    ela_util.safeMkdir(os.path.join(APP_DIR_PATH, "www"))
    ela_util.safeMkdir(os.path.join(APP_DIR_PATH, "platforms"))

    run_cmd("npm install --legacy-peer-deps")

if args.target == "all" or args.target == "cordova":
    print_with_color(bcolors.OKGREEN, 'Build platform:%s' % build_platform)
    updatePackageJson(APP_DIR_PATH + '/package.json', build_platform)

    if "ios" in build_platform and not args.skippodupdate:
        print_with_color(bcolors.OKCYAN, "If you don't want to call 'pod repo update', you can call build with '--skippodupdate'.")
        # update pod frameworks
        run_cmd('pod repo update')

    retry_count  = 0
    while True:
        retry_count += 1
        if retry_count <= 3:
            if isWindows():
                ret = run_cmd("cordova prepare", True)
            else:
                ret = run_cmd("SWIFT_VERSION=5 cordova prepare", True)

            if ret != 0:
                if args.autoclean:
                    print_with_color(bcolors.WARNING, 'Build error, Clean the build...')
                    # the current path is App.
                    run_cmd(TOOLCHAINS_DIR_PATH + '/bin/build clean')
                print_with_color(bcolors.FAIL, 'cordova prepare failed.')
                sys.exit(1)

            if check_platform_installed():
                break
            else:
                print_with_color(bcolors.WARNING, 'platform not installed. try to add platform again!')
                clean_cordova()
        else:
            print_with_color(bcolors.FAIL, 'cordova prepare failed.')
            sys.exit(1)

# Must call 'ionic cordova build', otherwise the index.html will not load cordova.js
if args.target == "all" or args.target == "cordova":
    noBuild = ""
    if "android" in build_platform:
        # check ANDROID_NDK_HOME
        setup_android_ndk()

        noBuild = " --no-build"

        if isWindows():
            run_cmd("set NODE_OPTIONS=--max-old-space-size=8192")
            run_cmd("ionic cordova build android --prod " + build_type + " " + build_arg)
        else:
            run_cmd("NODE_OPTIONS=--max-old-space-size=8192 ionic cordova build android --prod " + build_type + " " + build_arg)

        if args.uploadsourcemap:
            run_cmd("sentry-cli releases --org elastos new -p launcher default --finalize")
            run_cmd("sentry-cli releases --org elastos -p launcher files default upload-sourcemaps www/ --rewrite --strip-common-prefix")

    # if "electron" in build_platform:
    #     run_cmd("ionic cordova build electron --prod " + build_type + " " + build_arg)
    if "ios" in build_platform:
        run_cmd("NODE_OPTIONS=--max-old-space-size=8192 ionic cordova build ios --prod " + build_type + " " + build_arg + noBuild)


elapsed = timeit.default_timer() - startTime
minutes = elapsed / 60
seconds = elapsed % 60
print_with_color(bcolors.OKGREEN, 'elapsed time [%d min %0.2fs]' % (minutes, seconds))
